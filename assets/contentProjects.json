{
  "projects": [
    {
      "title": "PedF CUNI - User-friendly Recognition of Completion of Courses",
      "folder": "karolinka",
      "description": "High-school seminary work written as microservices in NetCore, Angular and deployed using Docker",
      "content": "![logo](/assets/images/content/karolinka/logo.png)\n# PedF CUNI - Recognition of Completion of Courses\n## Background\nIn the last year, every student has to do a seminary work - an application according to some chosen assignment - and I randomly picked this. The assignment was to build a web application with the following functions:\n- Login and registration for users\n- Use data from the Faculty of education at Charles University\n- Let the user search and pick only classes/subject that can be picked for his field and department\n- Fill the data into the official form and make it print-friendly\nWhile having the option to write everything in PHP and be done in 3 hours, I decided to make this work \"portfolio friendly\". I already have some experience with React, but I wanted to try something new, so I chose Angular. Combined with smooth SPA project generation (Angular + WebApi) and some previous experience, NetCore was my choice for the back-end.\n\n## Development - [source code](https://github.com/antoninkriz/KrizikPedFUznaniPredmetu)\n### Structure\nWhole project can be divided into following parts:\n- **Back-end**\n  - *KarolinkaUznani.Api* - Api containing only controllers and connection to RabbitMQ\n  - *KarolinkaUznani.Services* - Services themselves\n    - ... *.Auth* - Everything related to users - sign up, login, ...\n    - ... *.Data* - Fetching data related to Karolinka only from the database\n- **Front-end**\n  - KarolinkaUznani.Api/*[ClientApp](https://github.com/antoninkriz/KrizikPedFUznaniPredmetu-ClientApp)* - Whole front-end client with styles and everything around\n- **Database**\n  - *Database/\\*.sql* - SQL scripts to create and seed the database from\n  - *KarolinkaUznani.Database* - contains only stored procedures\n- **Tools**\n  - *DockerDeploy* - script for one-click deployment of the whole project\n  - *KarolinkaToSQL* - script parsing Karolinka into one huge SQL insert\n\n### Front-End\nThere isn't much to say, the development was (obviously) very similar to React. The only thing I would like to mention which I'm proud of is one ugly workaround. The form that has to be filled with the final data is an Excel spreadsheet with some custom-ish styling. It's huge and spending hours making it look same, but as a responsive table in HTML would be painful, so I tried multiple ways of converting such file into HTML. Some results were awful, some were better, but none of them was good enough - most of the time, thanks to the inability to scale properly for printing. Then someone very bright (I think it was me) had a great idea of converting it to SVG. That thankfully worked great and with some CSS scaled perfectly.\n\n### Server\nTo make everything fresh and cool I wanted to meet these requirements for no real reason (remember, this is 3 hours project in PHP and some JavaScript):\n- Microservices\n- Docker\n- Deploy script\nHaving already one project built with NetCore and microservices around RabbitMq the start was pretty easy, then I designed the database - MySQL - and implemented it - wrote some SQL procedures.\n\n### Tools\nWhile developing this project, I created a few tools:\n- KarolinkaToSQL - scrapper and parser for Karolinka, one huge ugly-ish Python script\n- DockerDeploy - shell script that builds the whole project, deploy it in docker and fill the database with new data\n\nNone of them is really fancy, but to this point, they work ~~perfectly~~ good enough.\n\n## Technologies\n### General\n- *Docker* - for simple project deployment across other systems\n- *RabbitMQ* - messaging queue for communication between API and Services\n- *MySQL* - platform on which is the whole database based around\n\n**[Docker](https://github.com/docker/compose)**\nA great tool to eliminate \"it works on my machine\" phrase. Simple to setup with docker-compose and sounds great as a buzzword.\n**[RabbitMQ](https://github.com/rabbitmq)**\nSince RabbitMQ is the most used solution of its type, combined with [RawRabbit](https://github.com/pardahlman/RawRabbit) (.Net framework for communication with RabbitMQ server) and since it's also used at my workplace, the choice was simple.\n**[MySQL](https://github.com/mysql)**\nTo make everything sound even cooler my first choice was MongoDB, but since the relational database is a better choice for this project, I stuck to MySQL which I already have more experience with. However, the whole structure of this project takes in mind possible usage of other types of databases.\n\n### Back-End\n- *C# DotNet Core* - framework the whole project is based on\n**[C# DotNet Core](https://github.com/Microsoft/dotnet)**\nWith my love for modern C#, its usage at my workplace, simple one-click creation of SPA (Single Page Application) web project and an already solid amount of experience, the choice was simple.\n\n### Front-End\n- *Angular 7* - front-end TypeScript based web framework\n- *SCSS* - CSS extension language\n\n**[Angular 7](https://github.com/angular/angular)**\nWith already some experience with React, I wanted to try something new, its also used at my workplace and with its popularity in other job listings, it was a simple choice over VueJS. [TypeScript](https://github.com/Microsoft/TypeScript)s \n**[SCSS](https://github.com/sass])**\nPure CSS makes me ~~sucidal~~ unhappy to work with, especially on bigger projects, so [LESS](https://github.com/less) or SCSS was an obvious choice. For my purposes, both would do the job just fine, but SCSS was easier for me to integrate with Angular.\n### Tools\n**[Python 3](https://github.com/python/)**\nWith a solid amount of libraries, Python was the perfect choice for something like a script parsing HTML from a website.\n\n## Screenshots\n![](/assets/images/content/karolinka/1.png)\n![](/assets/images/content/karolinka/2.png)\n![](/assets/images/content/karolinka/3.png)\n![](/assets/images/content/karolinka/4.png)\n![](/assets/images/content/karolinka/5.png)\n![](/assets/images/content/karolinka/6.png)\n![](/assets/images/content/karolinka/7.png)\n\n## What would I do differently\nThe microservices design isn't ideal (as before) - Remote Procedure Call isn't the smartest way, maybe I bodged some things too much (KarolinkaToSQL is truly ugly), but in the end, I'm pretty happy with the result.\n\n## Installation and requirements\n### Rquirements:\n- *Debian\n  - tested on Linux Mint 18.04 but should work on any common distro\n- *DotNet Core SDK*\n  - rested with version 2.2.0\n- *Docker*\n  - tested with version 18.09.4\n- *Python 3*\n  - with following libraries: `uuid`, `urllib`, `lxml`\n- *MySQL client*\n  - testesd with version 14.14\n- Networking:\n  - `api.local` redirected to `127.0.0.1` (testeds using `hosts` file)\n  - Ports:\n    - Web: `8080` - application itself, `5000, 5050, 5051` - running api and services\n    - RabbitMQ: `5672` - messaging queue itself, `15672` - RabbitMQ management\n    - Database: `30006` - MySQL database port\n\n### Installation\n```bash\n# requirements already satisfied\ngit clone https://github.com/antoninkriz/KrizikPedFUznaniPredmetu.git\ncd KrizikPedfUznaniPredmetu/Tools/DockerDeploy\nsudo ./netcore-publish.sh\n````"
    },
    {
      "title": "Křižíci - Unofficial app for skolakrizik.cz",
      "folder": "krizici2",
      "description": "New Křižíci application - fresh, cool and rewritten in NetCore microservices and Kotlin",
      "content": "![logo](/assets/images/content/krizici2/logo.png)\n# Křižíci - Unofficial app for skolakrizik.cz\n## Background\nA few years later, the school rebuild everything - shoutout to [Michal Dudek](https://www.michaldudek.it/). With a completely new website and a new system of class substitutions the old app was partially obsolete and having with few extra years of experience, I decided to rewrite the app from scratch. \n\n## Development\n### Server - [source code](https://github.com/antoninkriz/Krizici-Server-ASPNetCore)\nFirst, I rewrote the server. Since I already had a lot of experience with NetCore, I decided to go with it. One of the requirements from the school was Google login - data may not be publicly exposed to non-students thanks to GDPR. Also, all data moved to shared Team Drive (Google Drive for groups), so I had to implement [the Google Drive API](https://developers.google.com/drive/). To make everything automated, I decided to parse text from PDFs using [iText 7](https://itextpdf.com/) - AGPL library for working with PDFs (which may seem pretty ugly, but the general structure of PDFs never changed and was one of few things that were constant over the timespan of this project). Now getting lists of classes, teachers and classrooms was pretty easy - no more hardcoding. To get PNGs out of the PDFs, I went again with ImageMagick, but this time as a library for NetCore. Everything was also memory-cached to make responses even faster. To make everything \"fresh, cool, and in\" I decided not to write a monolithic application, so microservices over [RabbitMq](https://www.rabbitmq.com) was an obvious choice. The result was three microservices: API, Data and Auth. The content was still updated using crontab (I know...), this time sending a request using curl to the web server.\n### App -  [source code](https://github.com/antoninkriz/Krizici-App-Kotlin)\nThis time I used [Kotlin](https://kotlinlang.org), wrote cleaner, properly async code. Aside redesign which gave users an option to view timetables for not only their classes but also classrooms and teachers. Since the school finally made a brand new system for substitutions, displaying them was just a web view of the actual website. Also, as requested, Google Login was implemented. The result was way more stable and cleaner application and friendlier UI.\n\n## Technologies\n- Android\n  - [Kotlin](https://kotlinlang.org) - nothing more to say\n- Server\n  - [Nginx](https://nginx.org/en/) - as an HTTP proxy for NetCore WebAPI server\n  - [NetCore](https://dotnet.microsoft.com/) WebAPI - The framework everything was written in\n  - [RabbitMq](https://www.rabbitmq.com) - Message queue for all microservices\n  - [iText 7](https://itextpdf.com/), [ImageMagick](https://imagemagick.org), ...\n\n## Screenshots\n![](/assets/images/content/krizici2/1.jpg)\n![](/assets/images/content/krizici2/2.jpg)\n![](/assets/images/content/krizici2/3.jpg)\n![](/assets/images/content/krizici2/4.jpg)\n![](/assets/images/content/krizici2/5.jpg)\n\n## What would I do differently\nAside from checking if files differ before converting them, which is a pretty expensive task I'm pretty happy with the result. The microservices design isn't ideal, Remote Procedure Call to transfer bigger data like JSON or even images truly isn't the smartest thing, but everything was cached, so in this case, I don't think it was a significant problem."
    },
    {
      "title": "Křižíci - Unofficial app for vosaspsekrizik.cz",
      "folder": "krizici",
      "description": "First Křižíci Android application",
      "content": "![logo](/assets/images/content/krizici/logo.png)\n# Křižíci - Unofficial app for vosaspsekrizik.cz\n## Background\nMy school had timetables and class substitutions, before its complete rework, based around non-standard Excel files and big PDFs. This was painful to use on a computer and even worse on phones. Opening non-standard XLS files (yes, not even XLSX) was painful, sometimes even the official Excel app had problems displaying such file correctly, and the way to download a current version of such file was painful too:\n- Open schools website (non-responsive, few megabytes big)\n- Navigate through the site (through multiple pages) to the download\n- Finally, download the file\n- Open the file and hope for the best\nThis wasn't optimal, so I decided to build an app.\n\nThis app was the first more significant project I've made. At this time, the app isn't available anymore.\n\n## Development\nFirst, I started exploring server-less options using multiple Java libraries that would parse the XLS file which on first sight was an excellent idea - but the XLS file used some non-standard (at least not-parseable) elements containing the data. Also, the scheme of the file slightly changed all the time, and with such inconsistency, parsing wasn't an option, even with more sophisticated approaches with other, more advanced libraries that would run on a server - so I went with converting both PDF and XLS to an image.\n\nOn the server side, I chose LibreOffice for converting XLS file to PNG and [ImageMagick's](https://imagemagick.org) `convert` for the PDFs. The script simply downloaded all PDFs and the XLS files, turned them into PNGs which were later optimized using `morgify` and [optipng](http://optipng.sourceforge.net/). Then, everything was copied into [mginx's](https://nginx.org/en/) web directory available to the public. This was repeated every few minutes using cron.\n\nOn the client side, I used a web browser component (the simplest way to show images from the internet with the ability to zoom) to display the image. To make everything fancier, I've added parsing of current events and news from school's site and a countdown to the end of the current class and using ugly hacks and injecting JavaScript into browser component also automated login into grading system [Bakaláři](https://bakalari.cz).\n\n## Technologies\n- Android - Java (no other option for Android at that time)\n  - [Apache POI](https://poi.apache.org) - library for working with MS Office documents (although I haven't used it in the end)\n  - [jsoup](https://jsoup.org/) - Java library for parsing HTML\n- Server\n  - [nginx](https://nginx.org/en/) - as a HTTP server\n  - Bash scripting\n  - [LibreOffice](https://www.libreoffice.org/), [ImageMagick](https://imagemagick.org), ...\n\n## Screenshots\n![](/assets/images/content/krizici/1.jpg)\n![](/assets/images/content/krizici/2.jpg)\n![](/assets/images/content/krizici/3.jpg)\n![](/assets/images/content/krizici/4.jpg)\n![](/assets/images/content/krizici/5.jpg)\n![](/assets/images/content/krizici/6.jpg)\n\n## What would I do differently\nI've used several ugly hacks, especially in the Android code which I'm not proud of, and the whole project was state-of-art bodging. Today I would do many things differently. For example, before converting all files and optimizing them (which wasn't a simple, quick task for my cheap, single-core, 512 MB RAM server), I would check if they differ first. I wouldn't hardcode many things (like lists of classes, teachers and other things) into the app, using cleaner asynchronous code and so on. I fulfilled myself this wish with the next version of this app."
    }
  ]
}
